// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // posts         Post[]
    restaurant    Restaurant?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Restaurant {
    id              String     @id @default(cuid())
    name            String?    @db.VarChar(30)
    profileImage String?
    coverImage   String?
    facebookUrl     String?
    lineId          String?    @db.VarChar(30)
    googleMapUrl    String?
    phone           String?    @db.VarChar(30)
    website         String?    @db.VarChar(30)
    email           String?    @db.VarChar(30)
    owner           User       @relation(fields: [ownerId], references: [id])
    ownerId         String     @unique // relation scalar field (used in the `@relation` attribute above)
    menus           Menu[]
    categories      Category[]
    toppings        Topping[]
    meats           Meat[]
    createdAt       DateTime   @default(now())
}

model Category {
    id           Int         @id @default(autoincrement())
    name         String
    menus        Menu[]
    restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId String?
    createdAt    DateTime    @default(now())
    toppings     Topping[]
}

model CategoryStore {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
}

model Menu {
    id          Int     @id @default(autoincrement())
    name        String
    price       Int
    isSell      Boolean
    isPromotion Boolean
    imageUrl    String
    isHot       Boolean
    isNews      Boolean
    isDiscount  Boolean
    discount    Int
    detail      String

    restaurant     Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId   String?
    meatOptions    Meat[]      @relation("MenuMeats")
    toppingOptions Topping[]   @relation("MenuToppings")
    category       Category?   @relation(fields: [categoryId], references: [id])
    categoryId     Int?
    createdAt      DateTime    @default(now())
}

model Meat {
    id           Int         @id @default(autoincrement())
    name         String
    menus        Menu[]      @relation("MenuMeats")
    restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId String?
    createdAt    DateTime    @default(now())
}

model MeatStore {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
}

model Topping {
    id           Int         @id @default(autoincrement())
    name         String
    price        Int
    imageUrl     String?
    restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId String?
    menus        Menu[]      @relation("MenuToppings")
    createdAt    DateTime    @default(now())
    category     Category?   @relation(fields: [categoryId], references: [id])
    categoryId   Int?
}

model ToppingStore {
    id        Int      @id @default(autoincrement())
    name      String
    price     Int
    imageUrl  String?
    createdAt DateTime @default(now())
}

model ImageStores {
    id        Int      @id @default(autoincrement())
    key       String
    url       String
    type      String
    createdAt DateTime @default(now())
}
